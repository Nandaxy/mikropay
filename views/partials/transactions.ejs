<div class="container mx-auto px-1 py-8 my-6" id="transaction-container">
    <h2 class="text-2xl font-bold mb-4">Transaksi Terakhir</h2>

    <div class="overflow-x-auto" id="transaction-table" style="display: none;">
        <table class="min-w-full bg-white border border-gray-200">
            <thead>
                <tr>
                    <th class="px-4 py-2 border text-left text-sm font-medium text-gray-700">Waktu Transaksi</th>
                    <th class="px-4 py-2 border text-left text-sm font-medium text-gray-700">Voucher</th>
                    <th class="px-4 py-2 border text-left text-sm font-medium text-gray-700">Harga</th>
                    <th class="px-4 py-2 border text-left text-sm font-medium text-gray-700">Invoice</th>
                    <th class="px-4 py-2 border text-left text-sm font-medium text-gray-700">Status</th>
                </tr>
            </thead>
            <tbody class="whitespace-nowrap" id="transaction-list">
            </tbody>
        </table>
    </div>

    <p id="no-transactions" class="text-gray-600" style="display: none;">Belum ada transaksi.</p>

    <div id="loading-skeleton" class="grid grid-cols-1 gap-4">
        <div class="h-12 bg-gray-200 animate-pulse"></div>
        <div class="h-12 bg-gray-200 animate-pulse"></div>
        <div class="h-12 bg-gray-200 animate-pulse"></div>
    </div>
</div>

<script>
async function fetchTransactions() {
        try {
            const response = await fetch('/api/get-transaction');
            const data = await response.json();
            if (data.status && data.data.length > 0) {
                const sortedTransactions = data.data.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));
                document.getElementById('transaction-table').style.display = 'block';
                document.getElementById('no-transactions').style.display = 'none';
                document.getElementById('loading-skeleton').style.display = 'none';
                renderTransactions(sortedTransactions.slice(0, 25));
                calculateStats(sortedTransactions);
            } else {
                document.getElementById('transaction-table').style.display = 'none';
                document.getElementById('no-transactions').style.display = 'block';
                document.getElementById('loading-skeleton').style.display = 'none';
            }
        } catch (error) {
            console.error('Error fetching transactions:', error);
        }
    }

    function renderTransactions(transactions) {
        const transactionContainer = document.getElementById('transaction-list');
        transactionContainer.innerHTML = '';
        transactions.forEach(transaction => {
            const transactionDate = new Date(transaction.created_at);
            const formattedDate = transactionDate.toLocaleString('en-GB', { dateStyle: 'short', timeStyle: 'short' });
            const transactionRow = `
                <tr>
                    <td class="px-4 py-2 border text-sm">${formattedDate}</td>
                    <td class="px-4 py-2 border text-sm">${transaction.merchant_ref}</td>
                    <td class="px-4 py-2 border text-sm">Rp ${transaction.amount.toLocaleString()}</td>
                    <td class="px-4 py-2 border text-sm">${transaction.reference}</td>
                    <td class="px-4 py-2 border text-sm ${transaction.status === 'PAID' ? 'text-green-500' : 'text-red-500'}">${transaction.status}</td>
                </tr>
            `;
            transactionContainer.insertAdjacentHTML('beforeend', transactionRow);
        });
    }

    function calculateStats(transactions) {
        const totalIncome = transactions.reduce((sum, transaction) => sum + (transaction.status === 'PAID' ? transaction.amount : 0), 0);
        const todayIncome = transactions.reduce((sum, transaction) => {
            const createdAt = new Date(transaction.created_at);
            const today = new Date();
            if (createdAt.getDate() === today.getDate() && createdAt.getMonth() === today.getMonth() && createdAt.getFullYear() === today.getFullYear()) {
                return sum + (transaction.status === 'PAID' ? transaction.amount : 0);
            }
            return sum;
        }, 0);
        const totalTransactions = transactions.length;
        const todayTransactions = transactions.filter(transaction => {
            const createdAt = new Date(transaction.created_at);
            const today = new Date();
            return createdAt.getDate() === today.getDate() && createdAt.getMonth() === today.getMonth() && createdAt.getFullYear() === today.getFullYear();
        }).length;

        document.getElementById('total-income').textContent = `Rp ${totalIncome.toLocaleString()}`;
        document.getElementById('today-income').textContent = `Rp ${todayIncome.toLocaleString()}`;
        document.getElementById('total-transactions').textContent = totalTransactions.toLocaleString();
        document.getElementById('today-transactions').textContent = todayTransactions.toLocaleString();
    }

    document.addEventListener('DOMContentLoaded', fetchTransactions);
</script>